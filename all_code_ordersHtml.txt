
================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\CartController.java
================================================================================

package com.example.diplom.controllers;

import com.example.diplom.model.*;
import com.example.diplom.service.MenuService;
import com.example.diplom.service.OrderService;
import jakarta.servlet.http.HttpSession;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * РљРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РєРѕСЂР·РёРЅРѕР№ Рё Р·Р°РєР°Р·Р°РјРё.
 * РћР±СЂР°Р±Р°С‚С‹РІР°РµС‚ РѕРїРµСЂР°С†РёРё РґРѕР±Р°РІР»РµРЅРёСЏ/СѓРґР°Р»РµРЅРёСЏ С‚РѕРІР°СЂРѕРІ, РѕС„РѕСЂРјР»РµРЅРёСЏ Р·Р°РєР°Р·РѕРІ
 * Рё РїСЂРѕСЃРјРѕС‚СЂР° СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ (РґР»СЏ СЃРѕС‚СЂСѓРґРЅРёРєРѕРІ).
 */
@Slf4j
@AllArgsConstructor
@Controller
@RequestMapping("/cart")
public class CartController {

    private final OrderService orderService;
    private final MenuService menuService;

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃС‚СЂР°РЅРёС†Сѓ РєРѕСЂР·РёРЅС‹.
     * Р’С‹С‡РёСЃР»СЏРµС‚ РѕР±С‰СѓСЋ СЃС‚РѕРёРјРѕСЃС‚СЊ С‚РѕРІР°СЂРѕРІ Рё РїРµСЂРµРґР°РµС‚ РґР°РЅРЅС‹Рµ РІ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ.
     *
     * @param session РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ РїРѕР»СѓС‡РµРЅРёСЏ РєРѕСЂР·РёРЅС‹
     * @param model   РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё РґР°РЅРЅС‹С… РІ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ
     * @return РЁР°Р±Р»РѕРЅ СЃС‚СЂР°РЅРёС†С‹ РєРѕСЂР·РёРЅС‹ (cart.html)
     */
    @GetMapping
    public String viewCart(HttpSession session, Model model) {
        List<MenuItem> cart = getCart(session);
        double total = calculateTotal(cart);

        model.addAttribute("cart", cart);
        model.addAttribute("total", total);
        return "cart";
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ С‚РѕРІР°СЂ РІ РєРѕСЂР·РёРЅСѓ.
     * РЎРѕС…СЂР°РЅСЏРµС‚ РІС‹Р±СЂР°РЅРЅС‹Р№ С‚РѕРІР°СЂ РІ СЃРµСЃСЃРёРё Рё РїРµСЂРµРЅР°РїСЂР°РІР»СЏРµС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РјРµРЅСЋ.
     *
     * @param menuItemId ID РґРѕР±Р°РІР»СЏРµРјРѕРіРѕ С‚РѕРІР°СЂР°
     * @param session    РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ С…СЂР°РЅРµРЅРёСЏ РєРѕСЂР·РёРЅС‹
     * @return Р РµРґРёСЂРµРєС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РјРµРЅСЋ СЃ С‚РµРєСѓС‰РёРј menuId
     */
    @PostMapping("/add")
    public String addToCart(@RequestParam Long menuItemId, HttpSession session) {
        Long menuId = (Long) session.getAttribute("currentMenuId");
        List<MenuItem> cart = Optional.ofNullable((List<MenuItem>) session.getAttribute("cart"))
                .orElse(new ArrayList<>());

        MenuItem menuItem = menuService.getMenuItemById(menuItemId)
                .orElseThrow(() -> new RuntimeException("Р‘Р»СЋРґРѕ РЅРµ РЅР°Р№РґРµРЅРѕ"));

        cart.add(menuItem);
        session.setAttribute("cart", cart);
        return "redirect:/menu?mid=" + menuId;
    }

    /**
     * РЈРґР°Р»СЏРµС‚ С‚РѕРІР°СЂ РёР· РєРѕСЂР·РёРЅС‹.
     *
     * @param menuItemId ID СѓРґР°Р»СЏРµРјРѕРіРѕ С‚РѕРІР°СЂР°
     * @param session    РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ РєРѕСЂР·РёРЅС‹
     * @return Р РµРґРёСЂРµРєС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РјРµРЅСЋ СЃ С‚РµРєСѓС‰РёРј menuId
     */
    @PostMapping("/remove")
    public String removeFromCart(@RequestParam Long menuItemId, HttpSession session) {
        Long menuId = (Long) session.getAttribute("currentMenuId");
        List<MenuItem> cart = getCart(session);

        cart.removeIf(item -> item.getId().equals(menuItemId));
        session.setAttribute("cart", cart);

        return "redirect:/menu?mid=" + menuId;
    }

    /**
     * РћС„РѕСЂРјР»СЏРµС‚ Р·Р°РєР°Р· Рё РѕС‡РёС‰Р°РµС‚ РєРѕСЂР·РёРЅСѓ.
     * РљРѕРЅРІРµСЂС‚РёСЂСѓРµС‚ СЌР»РµРјРµРЅС‚С‹ РјРµРЅСЋ РІ РїСЂРѕРґСѓРєС‚С‹ Рё СЃРѕС…СЂР°РЅСЏРµС‚ Р·Р°РєР°Р·.
     *
     * @param session           РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ РїРѕР»СѓС‡РµРЅРёСЏ РєРѕСЂР·РёРЅС‹
     * @param redirectAttributes РђС‚СЂРёР±СѓС‚С‹ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРѕРѕР±С‰РµРЅРёР№ РѕР± РѕС€РёР±РєР°С…/СѓСЃРїРµС…Рµ
     * @return Р РµРґРёСЂРµРєС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РјРµРЅСЋ СЃ СЃРѕРѕР±С‰РµРЅРёРµРј СЂРµР·СѓР»СЊС‚Р°С‚Р°
     */
    @PostMapping("/checkout")
    public String checkout(HttpSession session, RedirectAttributes redirectAttributes) {
        List<MenuItem> cart = getCart(session);

        if (cart.isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "РљРѕСЂР·РёРЅР° РїСѓСЃС‚Р°!");
            return "redirect:/menu";
        }

        Order order = new Order();
        order.setStatus(OrderStatus.NEW);
        order.setProducts(convertMenuItemsToProducts(cart));
        orderService.createOrder(order);

        session.removeAttribute("cart");
        redirectAttributes.addFlashAttribute("success", "Р—Р°РєР°Р· СѓСЃРїРµС€РЅРѕ РѕС„РѕСЂРјР»РµРЅ!");
        return "redirect:/menu";
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃРїРёСЃРѕРє РІСЃРµС… Р·Р°РєР°Р·РѕРІ (РґР»СЏ СЃРѕС‚СЂСѓРґРЅРёРєРѕРІ Рё Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂРѕРІ).
     *
     * @param model РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ
     * @return РЁР°Р±Р»РѕРЅ СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ (orders.html)
     */
    @GetMapping("/all")
    @PreAuthorize("hasRole('STAFF') or hasRole('ADMIN')")
    public String viewAllOrders(Model model) {
        model.addAttribute("orders", orderService.getAllOrdersWithTotals());
        return "orders";
    }

    // ==== Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ РјРµС‚РѕРґС‹ ====

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РєРѕСЂР·РёРЅСѓ РёР· СЃРµСЃСЃРёРё РёР»Рё СЃРѕР·РґР°РµС‚ РЅРѕРІСѓСЋ.
     *
     * @param session РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё
     * @return РЎРїРёСЃРѕРє С‚РѕРІР°СЂРѕРІ РІ РєРѕСЂР·РёРЅРµ
     */
    private List<MenuItem> getCart(HttpSession session) {
        List<MenuItem> cart = (List<MenuItem>) session.getAttribute("cart");
        if (cart == null) {
            cart = new ArrayList<>();
            session.setAttribute("cart", cart);
        }
        return cart;
    }

    /**
     * Р’С‹С‡РёСЃР»СЏРµС‚ РѕР±С‰СѓСЋ СЃС‚РѕРёРјРѕСЃС‚СЊ С‚РѕРІР°СЂРѕРІ РІ РєРѕСЂР·РёРЅРµ.
     *
     * @param cart РЎРїРёСЃРѕРє С‚РѕРІР°СЂРѕРІ
     * @return РћР±С‰Р°СЏ СЃСѓРјРјР° Р·Р°РєР°Р·Р°
     */
    private double calculateTotal(List<MenuItem> cart) {
        return cart.stream().mapToDouble(MenuItem::getPrice).sum();
    }

    /**
     * РљРѕРЅРІРµСЂС‚РёСЂСѓРµС‚ СЌР»РµРјРµРЅС‚С‹ РјРµРЅСЋ РІ РїСЂРѕРґСѓРєС‚С‹ СЃ РїСЂРёРІСЏР·РєРѕР№ Рє РјРµРЅСЋ.
     *
     * @param menuItems РЎРїРёСЃРѕРє СЌР»РµРјРµРЅС‚РѕРІ РјРµРЅСЋ
     * @return РЎРїРёСЃРѕРє РїСЂРѕРґСѓРєС‚РѕРІ РґР»СЏ СЃРѕС…СЂР°РЅРµРЅРёСЏ РІ Р·Р°РєР°Р·Рµ
     * @throws IllegalArgumentException Р•СЃР»Рё С‚РёРї Р±Р»СЋРґР° РЅРµ РїРѕРґРґРµСЂР¶РёРІР°РµС‚СЃСЏ
     * @throws IllegalStateException    Р•СЃР»Рё СЌР»РµРјРµРЅС‚ РјРµРЅСЋ РЅРµ РїСЂРёРІСЏР·Р°РЅ Рє РјРµРЅСЋ
     */
    private List<Product> convertMenuItemsToProducts(List<MenuItem> menuItems) {
        return menuItems.stream()
                .map(item -> {
                    Product product;
                    if (item instanceof PizzaMenuItem) {
                        PizzaMenuItem pizzaItem = (PizzaMenuItem) item;
                        product = new Pizza(
                                pizzaItem.getName(),
                                pizzaItem.getDescription(),
                                pizzaItem.getPrice(),
                                pizzaItem.getDiameter()
                        );
                    } else if (item instanceof RollMenuItem) {
                        RollMenuItem rollItem = (RollMenuItem) item;
                        product = new RollDish(
                                rollItem.getName(),
                                rollItem.getDescription(),
                                rollItem.getPrice(),
                                rollItem.getPieceCount()
                        );
                    } else {
                        throw new IllegalArgumentException("РќРµРїРѕРґРґРµСЂР¶РёРІР°РµРјС‹Р№ С‚РёРї Р±Р»СЋРґР°");
                    }

                    if (item.getMenu() == null) {
                        throw new IllegalStateException("MenuItem РЅРµ РёРјРµРµС‚ СЃРІСЏР·Р°РЅРЅРѕРіРѕ РјРµРЅСЋ");
                    }
                    product.setMenuId(item.getMenu().getId());
                    return product;
                })
                .collect(Collectors.toList());
    }
}



================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\MainController.java
================================================================================

package com.example.diplom.controllers;


import com.example.diplom.model.Menu;
import com.example.diplom.model.MenuItem;
import com.example.diplom.service.MenuService;
import com.example.diplom.service.OrderService;
import com.example.diplom.service.ProductService;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.List;

// MainController.java
/**
 * РћСЃРЅРѕРІРЅРѕР№ РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ РіР»Р°РІРЅРѕР№ СЃС‚СЂР°РЅРёС†С‹ Рё РјРµРЅСЋ.
 */
@RequiredArgsConstructor
@Controller
public class MainController {
    private final ProductService productService;
    private final MenuService menuService;
    private final OrderService orderService;

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ РґРѕРјР°С€РЅСЋСЋ СЃС‚СЂР°РЅРёС†Сѓ СЃРѕ СЃРїРёСЃРєРѕРј РјРµРЅСЋ.
     *
     * @param model РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРїРёСЃРєР° РјРµРЅСЋ
     * @return РЁР°Р±Р»РѕРЅ РіР»Р°РІРЅРѕР№ СЃС‚СЂР°РЅРёС†С‹ (index.html)
     */
    @GetMapping("/")
    public String home(Model model) {
        List<Menu> menus = menuService.getAllMenus();
        model.addAttribute("menus", menus);
        model.addAttribute("message", "Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ РІ РЅР°С€ СЂРµСЃС‚РѕСЂР°РЅ!");
        return "index";
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ РјРµРЅСЋ РїРѕ СѓРєР°Р·Р°РЅРЅРѕРјСѓ ID РёР»Рё РёР· СЃРµСЃСЃРёРё.
     *
     * @param mid      ID РјРµРЅСЋ (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ)
     * @param session  РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ С…СЂР°РЅРµРЅРёСЏ С‚РµРєСѓС‰РµРіРѕ menuId
     * @param model    РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЌР»РµРјРµРЅС‚РѕРІ РјРµРЅСЋ Рё РѕР±С‰РµР№ СЃСѓРјРјС‹
     * @return РЁР°Р±Р»РѕРЅ РјРµРЅСЋ (menu.html)
     */
    @GetMapping("/menu")
    public String menu(@RequestParam(required = false) Long mid, HttpSession session, Model model) {
        Long menuId = (mid != null) ? mid : (Long) session.getAttribute("currentMenuId");
        if (menuId == null) {
            menuId = 1L;
        }
        session.setAttribute("currentMenuId", menuId);
        List<MenuItem> menuItems = menuService.getMenuItems(menuId);
        List<MenuItem> cart = (List<MenuItem>) session.getAttribute("cart");
        if (cart == null) {
            cart = new ArrayList<>();
            session.setAttribute("cart", cart);
        }
        double total = cart != null ? calculateTotal(cart) : 0.0;
        model.addAttribute("menuItems", menuItems);
        model.addAttribute("total", total);
        return "menu";
    }

    private double calculateTotal(List<MenuItem> cart) {
        return cart.stream().mapToDouble(MenuItem::getPrice).sum();
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃРїРёСЃРѕРє Р·Р°РєР°Р·РѕРІ.
     *
     * @param model РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ
     * @return РЁР°Р±Р»РѕРЅ СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ (orders.html)
     */
    @GetMapping("/view")
    public String viewOrders(Model model) {
        model.addAttribute("orders", orderService.getAllOrdersWithTotals());
        return "orders";
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\MenuController.java
================================================================================

package com.example.diplom.controllers;

import com.example.diplom.model.*;
import com.example.diplom.service.MenuService;
import com.example.diplom.service.OrderService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;


/**
 * REST-РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РјРµРЅСЋ.
 */
@RestController
@RequestMapping("/menus")
@RequiredArgsConstructor
public class MenuController {
    private final MenuService menuService;

    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІРѕРµ РјРµРЅСЋ.
     *
     * @param menu РћР±СЉРµРєС‚ РјРµРЅСЋ РґР»СЏ СЃРѕР·РґР°РЅРёСЏ
     * @return РЎРѕР·РґР°РЅРЅРѕРµ РјРµРЅСЋ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping
    public ResponseEntity<Menu> createMenu(@RequestBody Menu menu) {
        return ResponseEntity.ok(menuService.createMenu(menu));
    }
================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\OrderController.java
================================================================================

package com.example.diplom.controllers;


//import com.example.diplom.cases.AddProductToOrderUseCase;
import com.example.diplom.dto.OrderResponse;
import com.example.diplom.model.Order;

import com.example.diplom.service.OrderService;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

/**
 * REST-РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ Р·Р°РєР°Р·Р°РјРё.
 */
@Slf4j
@AllArgsConstructor
@RestController
@RequestMapping("/orders")
class OrderController {
    private final OrderService orderService;

    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІС‹Р№ Р·Р°РєР°Р·.
     *
     * @param order РћР±СЉРµРєС‚ Р·Р°РєР°Р·Р° РґР»СЏ СЃРѕР·РґР°РЅРёСЏ
     * @return РЎРѕР·РґР°РЅРЅС‹Р№ Р·Р°РєР°Р· РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping
    public ResponseEntity<Order> createOrder(@RequestBody Order order) {
        return new ResponseEntity<>(orderService.createOrder(order), HttpStatus.CREATED);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ Р·Р°РєР°Р· РїРѕ ID СЃ РѕР±С‰РµР№ СЃСѓРјРјРѕР№.
     *
     * @param id ID Р·Р°РєР°Р·Р°
     * @return Р—Р°РєР°Р· СЃ РѕР±С‰РµР№ СЃСѓРјРјРѕР№ РІ DTO
     */
    @GetMapping("/{id}")
    public ResponseEntity<OrderResponse> getOrder(@PathVariable Long id) {
        Order orderById;
        try {
            orderById = orderService.getOrderById(id);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new OrderResponse());
        }
        double total = orderService.calculateOrderTotal(id);
        OrderResponse response = orderService.orderToOrderResponse(orderById, total);
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РІСЃРµ Р·Р°РєР°Р·С‹ СЃ СЃСѓРјРјР°РјРё.
     *
     * @return РЎРїРёСЃРѕРє Р·Р°РєР°Р·РѕРІ СЃ СЃСѓРјРјР°РјРё РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @GetMapping
    public ResponseEntity<List<OrderResponse>> getAllOrders() {
        return new ResponseEntity<>(orderService.getAllOrdersWithTotals(), HttpStatus.OK);
    }

    /**
     * РЈРґР°Р»СЏРµС‚ Р·Р°РєР°Р· РїРѕ ID.
     *
     * @param id ID Р·Р°РєР°Р·Р°
     * @return РџСѓСЃС‚РѕР№ РѕС‚РІРµС‚ РїСЂРё СѓСЃРїРµС…Рµ
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteOrder(@PathVariable Long id) {
        orderService.deleteOrder(id);
        return ResponseEntity.ok().build();
    }

    /**
     * РћР±РЅРѕРІР»СЏРµС‚ СЃСѓС‰РµСЃС‚РІСѓСЋС‰РёР№ Р·Р°РєР°Р·.
     *
     * @param id    ID Р·Р°РєР°Р·Р°
     * @param order РћР±РЅРѕРІР»РµРЅРЅС‹Рµ РґР°РЅРЅС‹Рµ Р·Р°РєР°Р·Р°
     * @return РћР±РЅРѕРІР»РµРЅРЅС‹Р№ Р·Р°РєР°Р· РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PutMapping("/{id}")
    public ResponseEntity<Order> updateOrder(@PathVariable Long id, @RequestBody Order order) {
        try {
            return new ResponseEntity<>(orderService.updateOrder(order), HttpStatus.OK);
        } catch (RuntimeException e) {
            log.warn("Р—Р°РєР°Р· СЃ С‚Р°РєРёРј Id РЅРµ РЅР°Р№РґРµРЅ");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new Order());
        }
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ РїСЂРѕРґСѓРєС‚ РёР· РјРµРЅСЋ РІ Р·Р°РєР°Р·.
     *
     * @param orderId      ID Р·Р°РєР°Р·Р°
     * @param menuItemId ID СЌР»РµРјРµРЅС‚Р° РјРµРЅСЋ
     * @return РћР±РЅРѕРІР»РµРЅРЅС‹Р№ Р·Р°РєР°Р· РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping("/{orderId}/menu-items/{menuItemId}")
    public ResponseEntity<Order> addProductFromMenu(
            @PathVariable Long orderId,
            @PathVariable Long menuItemId) {
        try {
            Order updatedOrder = orderService.addProductFromMenu(orderId, menuItemId);
            return new ResponseEntity<>(updatedOrder, HttpStatus.OK);
        } catch (RuntimeException e) {
            log.warn("РћС€РёР±РєР° РїСЂРё РґРѕР±Р°РІР»РµРЅРёРё РїСЂРѕРґСѓРєС‚Р° РІ Р·Р°РєР°Р·: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new Order());
        }
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃРїРёСЃРѕРє Р·Р°РєР°Р·РѕРІ.
     *
     * @param model РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ
     * @return РЁР°Р±Р»РѕРЅ СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ (orders.html)
     */
    @GetMapping("/view")
    public String viewOrders(Model model) {
        model.addAttribute("orders", orderService.getAllOrdersWithTotals());
        return "orders";
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ С‚РѕРІР°СЂ РІ С‚РµРєСѓС‰РёР№ Р·Р°РєР°Р· (СѓРїСЂРѕС‰РµРЅРЅР°СЏ РІРµСЂСЃРёСЏ).
     *
     * @param menuItemId ID СЌР»РµРјРµРЅС‚Р° РјРµРЅСЋ
     * @param attributes РђС‚СЂРёР±СѓС‚С‹ РґР»СЏ СЃРѕРѕР±С‰РµРЅРёР№
     * @return Р РµРґРёСЂРµРєС‚ РЅР° РјРµРЅСЋ СЃ СѓРІРµРґРѕРјР»РµРЅРёРµРј
     */
    @PostMapping("/add")
    public String addToOrder(
            @RequestParam Long menuItemId,
            RedirectAttributes attributes) {
        try {
            Order order = orderService.createOrder(new Order());
            orderService.addProductFromMenu(order.getId(), menuItemId);
            attributes.addFlashAttribute("success", "Р‘Р»СЋРґРѕ РґРѕР±Р°РІР»РµРЅРѕ РІ Р·Р°РєР°Р·!");
        } catch (Exception e) {
            attributes.addFlashAttribute("error", "РћС€РёР±РєР°: " + e.getMessage());
        }
        return "redirect:/menu";
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\ProductsController.java
================================================================================

package com.example.diplom.controllers;

import com.example.diplom.dto.ProductDTO;
import com.example.diplom.model.*;
import com.example.diplom.service.ProductService;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

// ProductsController.java
/**
 * REST-РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РїСЂРѕРґСѓРєС‚Р°РјРё.
 */
@RestController
@AllArgsConstructor
@RequestMapping("/products")
public class ProductsController {
    private final ProductService productService;

    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІС‹Р№ РїСЂРѕРґСѓРєС‚ РЅР° РѕСЃРЅРѕРІРµ DTO.
     *
     * @param productDTO DTO СЃ РґР°РЅРЅС‹РјРё РїСЂРѕРґСѓРєС‚Р°
     * @return РЎРѕР·РґР°РЅРЅС‹Р№ РїСЂРѕРґСѓРєС‚ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody ProductDTO productDTO) {
        Product product;
        if ("PIZZA".equals(productDTO.getDtype())) {
            product = new Pizza(productDTO.getName(), productDTO.getDescription(), productDTO.getPrice(), productDTO.getDiameter());
        } else if ("ROLL".equals(productDTO.getDtype())) {
            product = new RollDish(productDTO.getName(), productDTO.getDescription(), productDTO.getPrice(), productDTO.getPieceCount());
        } else {
            throw new IllegalArgumentException("РќРµРёР·РІРµСЃС‚РЅС‹Р№ С‚РёРї РїСЂРѕРґСѓРєС‚Р°");
        }
        Product createdProduct = productService.createProduct(product);
        return new ResponseEntity<>(createdProduct, HttpStatus.CREATED);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РїСЂРѕРґСѓРєС‚ РїРѕ ID.
     *
     * @param id ID РїСЂРѕРґСѓРєС‚Р°
     * @return РџСЂРѕРґСѓРєС‚ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @GetMapping("/{id}")
    public ResponseEntity<Product> getProduct(@PathVariable Long id) {
        Product productById;
        try {
            productById = (Product) productService.getProductById(id);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new Pizza());
        }
        return new ResponseEntity<>(productById, HttpStatus.OK);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РІСЃРµ РїСЂРѕРґСѓРєС‚С‹.
     *
     * @return РЎРїРёСЃРѕРє РІСЃРµС… РїСЂРѕРґСѓРєС‚РѕРІ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        return new ResponseEntity<>(productService.getAllProducts(), HttpStatus.OK);
    }

    /**
     * РЈРґР°Р»СЏРµС‚ РїСЂРѕРґСѓРєС‚ РїРѕ ID.
     *
     * @param id ID РїСЂРѕРґСѓРєС‚Р°
     * @return РџСѓСЃС‚РѕР№ РѕС‚РІРµС‚ РїСЂРё СѓСЃРїРµС…Рµ
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
        Product productById;
        try {
            productById = productService.getProductById(id);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
        productService.deleteProduct(productById.getId());
        return ResponseEntity.ok().build();
    }

    /**
     * РћР±РЅРѕРІР»СЏРµС‚ СЃСѓС‰РµСЃС‚РІСѓСЋС‰РёР№ РїСЂРѕРґСѓРєС‚.
     *
     * @param id          ID РїСЂРѕРґСѓРєС‚Р°
     * @param productDTO DTO СЃ РѕР±РЅРѕРІР»РµРЅРЅС‹РјРё РґР°РЅРЅС‹РјРё
     * @return РћР±РЅРѕРІР»РµРЅРЅС‹Р№ РїСЂРѕРґСѓРєС‚ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PutMapping("/{id}")
    public ResponseEntity<Product> updateProduct(@PathVariable Long id, @RequestBody ProductDTO productDTO) {
        Product productById;
        try {
            productById = productService.getProductById(id);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new Pizza());
        }
        if (productDTO.getName() != null) {
            productById.setName(productDTO.getName());
        }
        if (productDTO.getDescription() != null) {
            productById.setDescription(productDTO.getDescription());
        }
        if (productDTO.getPrice() != 0) {
            productById.setPrice(productDTO.getPrice());
        }
        if (productDTO.getProductStatus() != null) {
            productById.setProductStatus(productDTO.getProductStatus());
        }
        if (productById instanceof Pizza && productDTO.getDiameter() != 0) {
            ((Pizza) productById).setDiameter(productDTO.getDiameter());
        }
        Product updatedProduct = productService.updateProduct(productById);
        return new ResponseEntity<>(updatedProduct, HttpStatus.OK);
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\dto\OrderResponse.java
================================================================================

package com.example.diplom.dto;


import com.example.diplom.model.OrderStatus;
import com.example.diplom.model.Product;
import lombok.Getter;
import lombok.Setter;
import java.util.List;


/**
 * DTO РґР»СЏ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёСЏ РёРЅС„РѕСЂРјР°С†РёРё Рѕ Р·Р°РєР°Р·Рµ.
 * РЎРѕРґРµСЂР¶РёС‚ РґР°РЅРЅС‹Рµ Рѕ СЃС‚Р°С‚СѓСЃРµ, РїСЂРѕРґСѓРєС‚Р°С…, РѕР±С‰РµР№ СЃСѓРјРјРµ Рё РёРЅС„РѕСЂРјР°С†РёРё Рѕ СЂРµСЃС‚РѕСЂР°РЅРµ.
 * РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РїРµСЂРµРґР°С‡Рё РґР°РЅРЅС‹С… РјРµР¶РґСѓ СЃР»РѕСЏРјРё РїСЂРёР»РѕР¶РµРЅРёСЏ.
 */
@Getter
@Setter
public class OrderResponse {
    private Long id;
    private OrderStatus status;
    private List<Product> products;
    private double total;
    private String restaurantName;
    private String restaurantAddress;
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\dto\ProductDTO.java
================================================================================

package com.example.diplom.dto;


import com.example.diplom.model.ProductStatus;
import lombok.AllArgsConstructor;
import lombok.Data;




/**
 * DTO РґР»СЏ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёСЏ РёРЅС„РѕСЂРјР°С†РёРё Рѕ РїСЂРѕРґСѓРєС‚Рµ.
 * РЎРѕРґРµСЂР¶РёС‚ РѕСЃРЅРѕРІРЅС‹Рµ С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёРєРё Рё СЃС‚Р°С‚СѓСЃ РїСЂРѕРґСѓРєС‚Р°.
 * РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РїРµСЂРµРґР°С‡Рё РґР°РЅРЅС‹С… РјРµР¶РґСѓ РєР»РёРµРЅС‚РѕРј Рё СЃРµСЂРІРµСЂРѕРј.
 */
@AllArgsConstructor
@Data
public class ProductDTO {
    public Long id;
    public String name;
    public String description;
    public double price;
    public ProductStatus productStatus;
    public int diameter;
    public int pieceCount;
    public String dtype;

}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\Dish.java
================================================================================

package com.example.diplom.model;

import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;

/**
 * Р‘Р°Р·РѕРІС‹Р№ Р°Р±СЃС‚СЂР°РєС‚РЅС‹Р№ РєР»Р°СЃСЃ РґР»СЏ Р±Р»СЋРґ СЃ РѕР±С‰РёРјРё С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёРєР°РјРё.
 * РСЃРїРѕР»СЊР·СѓРµС‚ SINGLE_TABLE РЅР°СЃР»РµРґРѕРІР°РЅРёРµ СЃ РґРёСЃРєСЂРёРјРёРЅР°С‚РѕСЂРѕРј "DISH".
 */
@Entity
@DiscriminatorValue("DISH")
public abstract class Dish extends Product {

    public Dish() {
        super();
    }

    public Dish(String name, String description, double price) {
        super(name, description, price);
    }


}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\Menu.java
================================================================================

package com.example.diplom.model;

import jakarta.persistence.*;

/**
 * РЎСѓС‰РЅРѕСЃС‚СЊ РјРµРЅСЋ СЂРµСЃС‚РѕСЂР°РЅР°.
 * РЎРѕРґРµСЂР¶РёС‚ РЅР°Р·РІР°РЅРёРµ, Р°РґСЂРµСЃ Рё РѕРїРёСЃР°РЅРёРµ Р·Р°РІРµРґРµРЅРёСЏ.
 */
@Entity
@Table(name = "menus")
public class Menu {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String address; // РђРґСЂРµСЃ Р·Р°РІРµРґРµРЅРёСЏ
    private String description;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\MenuItem.java
================================================================================

package com.example.diplom.model;

import jakarta.persistence.*;



/**
 * Р‘Р°Р·РѕРІС‹Р№ РєР»Р°СЃСЃ РґР»СЏ СЌР»РµРјРµРЅС‚РѕРІ РјРµРЅСЋ СЃ SINGLE_TABLE РЅР°СЃР»РµРґРѕРІР°РЅРёРµРј.
 * РЎРѕРґРµСЂР¶РёС‚ СЃРІСЏР·СЊ ManyToOne СЃ Menu Рё Р±Р°Р·РѕРІС‹Рµ Р°С‚СЂРёР±СѓС‚С‹ РїСЂРѕРґСѓРєС‚Р°.
 */
@Entity
@Table(name = "menu_items")
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "dtype", discriminatorType = DiscriminatorType.STRING)
public abstract class MenuItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String description;
    private double price;

    @ManyToOne
    @JoinColumn(name = "menu_id")
    private Menu menu;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public Menu getMenu() {
        return menu;
    }

    public void setMenu(Menu menu) {
        this.menu = menu;
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\Order.java
================================================================================

package com.example.diplom.model;


import jakarta.persistence.*;

import java.util.ArrayList;
import java.util.List;

/**
 * РЎСѓС‰РЅРѕСЃС‚СЊ Р·Р°РєР°Р·Р° СЃ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРёРј РѕР±РЅРѕРІР»РµРЅРёРµРј СЃС‚Р°С‚СѓСЃР°.
 * РЎРѕРґРµСЂР¶РёС‚ Р»РѕРіРёРєСѓ СЃРёРЅС…СЂРѕРЅРёР·Р°С†РёРё СЃС‚Р°С‚СѓСЃР° Р·Р°РєР°Р·Р° СЃРѕ СЃС‚Р°С‚СѓСЃР°РјРё РїСЂРѕРґСѓРєС‚РѕРІ.
 */
@Entity
@Table(name = "orders")
public class Order {


    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JoinTable(
            name = "orders_products",
            joinColumns = @JoinColumn(name = "order_id"),
            inverseJoinColumns = @JoinColumn(name="product_id")
    )
    private List<Product> products;

    @Enumerated(EnumType.STRING)
    private OrderStatus status = OrderStatus.NEW;

    public Order() {
        this.products = new ArrayList<>();
    }


    public Long getId() {
        return id;
    }


    public void setId(Long id) {
        this.id = id;
    }

    public List<Product> getProducts() {
        return products;
    }

    public void setProducts(List<Product> products) {
        this.products = products;
    }

    public OrderStatus getStatus() {
        return status;
    }

    public void setStatus(OrderStatus status) {
        this.status = status;
    }



    public void addProduct(Product product) {
        products.add(product);
        updateOrderStatus();
    }


    private void updateOrderStatus() {
        boolean allReady = products.stream().allMatch(p -> p.getProductStatus() == ProductStatus.READY);
        boolean anyInProgress = products.stream().anyMatch(p -> p.getProductStatus() == ProductStatus.IN_PROGRESS);

        if (allReady) {
            status = OrderStatus.COMPLETED;
        } else if (anyInProgress) {
            status = OrderStatus.IN_PROGRESS;
        } else {
            status = OrderStatus.NEW;
        }


    }

    public void updateProductStatus(Product product, ProductStatus status) {
        product.setProductStatus(status);
        updateOrderStatus();
    }




}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\OrderStatus.java
================================================================================

package com.example.diplom.model;


/**
 * РџРµСЂРµС‡РёСЃР»РµРЅРёРµ СЃС‚Р°С‚СѓСЃРѕРІ Р·Р°РєР°Р·Р°.
 */
public enum OrderStatus {
    NEW, IN_PROGRESS, COMPLETED;
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\Pizza.java
================================================================================

package com.example.diplom.model;

import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;



/**
 * РљРѕРЅРєСЂРµС‚РЅР°СЏ СЂРµР°Р»РёР·Р°С†РёСЏ Р±Р»СЋРґР° - РїРёС†С†Р°.
 * Р”РѕР±Р°РІР»СЏРµС‚ СѓРЅРёРєР°Р»СЊРЅС‹Р№ Р°С‚СЂРёР±СѓС‚ РґРёР°РјРµС‚СЂР°.
 */
@Entity
@DiscriminatorValue("PIZZA")
public class Pizza extends Dish {
    private int diameter; // Р”РёР°РјРµС‚СЂ РїРёС†С†С‹ РІ СЃРј

    public Pizza() {
        super();
    }

    public Pizza(String name, String description, double price, int diameter) {
        super(name, description, price);
        this.diameter = diameter;
    }

    public int getDiameter() {
        return diameter;
    }

    public void setDiameter(int diameter) {
        this.diameter = diameter;
    }



    @Override
    public String toString() {
        return "Pizza{" +
                "name='" + getName() + '\'' +
                ", description='" + getDescription() + '\'' +
                ", price=" + getPrice() +
                ", diameter=" + diameter +
                ", progressStatus=" + getProductStatus() +
                '}';
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\PizzaMenuItem.java
================================================================================

package com.example.diplom.model;

import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;



/**
 * Р­Р»РµРјРµРЅС‚ РјРµРЅСЋ РґР»СЏ РїРёС†С†С‹.
 * РќР°СЃР»РµРґСѓРµС‚ Р±Р°Р·РѕРІС‹Рµ Р°С‚СЂРёР±СѓС‚С‹ MenuItem Рё РґРѕР±Р°РІР»СЏРµС‚ РґРёР°РјРµС‚СЂ.
 */
@Entity
@DiscriminatorValue("PIZZA")
public class PizzaMenuItem extends MenuItem {

    private int diameter; // РЈРЅРёРєР°Р»СЊРЅРѕРµ РїРѕР»Рµ РґР»СЏ РїРёС†С†С‹


    public int getDiameter() {
        return diameter;
    }

    public void setDiameter(int diameter) {
        this.diameter = diameter;
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\Product.java
================================================================================

package com.example.diplom.model;

import jakarta.persistence.*;



/**
 * Р‘Р°Р·РѕРІС‹Р№ РєР»Р°СЃСЃ РїСЂРѕРґСѓРєС‚РѕРІ.
 * РСЃРїРѕР»СЊР·СѓРµС‚ SINGLE_TABLE РЅР°СЃР»РµРґРѕРІР°РЅРёРµ.
 */
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "dtype", discriminatorType = DiscriminatorType.STRING)
@Table(name = "PRODUCTS")
public abstract class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    private double price;

    @Enumerated(EnumType.STRING)
    @Column(name = "status")
    private ProductStatus productStatus = ProductStatus.NOT_STARTED;

    @Column(name = "menu_id")
    private Long menuId;

    public Long getMenuId() {
        return menuId;
    }

    public void setMenuId(Long menuId) {
        this.menuId = menuId;
    }

    public Product(){}

    public Product(String name, String description, double price, Long menuId) {
        this.name = name;
        this.description = description;
        this.price = price;
        this.menuId = menuId;
    }

    public Product(String name, String description, double price) {
        this.name = name;
        this.description = description;
        this.price = price;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public ProductStatus getProductStatus() {
        return productStatus;
    }

    public void setProductStatus(ProductStatus productStatus) {
        this.productStatus = productStatus;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }





    public void  updateStatus( ProductStatus productStatus){
        this.productStatus = productStatus;
    }

    @Override
    public String toString() {
        return "Product{" +
                "name='" + name + '\'' +
                ", description='" + description + '\'' +
                ", price=" + price +
                ", progressStatus=" + productStatus +
                '}';
    }



}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\ProductStatus.java
================================================================================

package com.example.diplom.model;


/**
 * РџРµСЂРµС‡РёСЃР»РµРЅРёРµ СЃС‚Р°С‚СѓСЃРѕРІ РїСЂРѕРґСѓРєС‚Р°.
 */
public enum ProductStatus {
    NOT_STARTED, IN_PROGRESS, READY;
}



================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\RollDish.java
================================================================================

package com.example.diplom.model;


import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;



/**
 * РљРѕРЅРєСЂРµС‚РЅР°СЏ СЂРµР°Р»РёР·Р°С†РёСЏ Р±Р»СЋРґР° - СЂРѕР»Р»С‹.
 * Р”РѕР±Р°РІР»СЏРµС‚ Р°С‚СЂРёР±СѓС‚ РєРѕР»РёС‡РµСЃС‚РІР° РєСѓСЃРѕС‡РєРѕРІ.
 */
@Entity
@DiscriminatorValue("ROLL")
public class RollDish extends Dish {
    private int pieceCount; // Р”РёР°РјРµС‚СЂ РїРёС†С†С‹ РІ СЃРј

    public RollDish() {
        super();
    }

    public RollDish (String name, String description, double price, int pieceCount) {
        super(name, description, price);
        this.pieceCount = pieceCount;
    }

    public int getPieceCount() {
        return pieceCount;
    }

    public void setPieceCount(int pieceCount) {
        this.pieceCount = pieceCount;
    }


    @Override
    public String toString() {
        return "Roll{" +
                "name='" + getName() + '\'' +
                ", description='" + getDescription() + '\'' +
                ", price=" + getPrice() +
                ", pieceCount=" + pieceCount +
                ", progressStatus=" + getProductStatus() +
                '}';
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\model\RollMenuItem.java
================================================================================

package com.example.diplom.model;

import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;



/**
 * Р­Р»РµРјРµРЅС‚ РјРµРЅСЋ РґР»СЏ СЂРѕР»Р»РѕРІ.
 * РќР°СЃР»РµРґСѓРµС‚ Р±Р°Р·РѕРІС‹Рµ Р°С‚СЂРёР±СѓС‚С‹ MenuItem Рё РґРѕР±Р°РІР»СЏРµС‚ РєРѕР»РёС‡РµСЃС‚РІРѕ РєСѓСЃРѕС‡РєРѕРІ.
 */
@Entity
@DiscriminatorValue("ROLL")
public class RollMenuItem extends MenuItem {

    private int pieceCount; // РЈРЅРёРєР°Р»СЊРЅРѕРµ РїРѕР»Рµ РґР»СЏ СЂРѕР»Р»РѕРІ

    public int getPieceCount() {
        return pieceCount;
    }

    public void setPieceCount(int pieceCount) {
        this.pieceCount = pieceCount;
    }
}



================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\repositories\MenuRepository.java
================================================================================

package com.example.diplom.repositories;

import com.example.diplom.model.Menu;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MenuRepository extends JpaRepository<Menu, Long> {
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\repositories\OrderJpaRepository.java
================================================================================

package com.example.diplom.repositories;

import com.example.diplom.model.Order;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface OrderJpaRepository extends JpaRepository<Order, Long>{



}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\repositories\OrderRepository.java
================================================================================

package com.example.diplom.repositories;

import com.example.diplom.model.Order;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface OrderRepository {
    Order save(Order order);
    Optional<Order> findById(Long id);


    void deleteById(Long id);

    Order update(Order order);

    List<Order> findAll();
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\repositories\OrderRepositoryImpl.java
================================================================================

package com.example.diplom.repositories;

import com.example.diplom.model.Order;
import org.springframework.stereotype.Repository;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Optional;

/**
 * Р РµРїРѕР·РёС‚РѕСЂРёР№ РґР»СЏ СЂР°Р±РѕС‚С‹ СЃ Р·Р°РєР°Р·Р°РјРё.
 * РћР±СЉРµРґРёРЅСЏРµС‚ РјРµС‚РѕРґС‹ JpaRepository Рё РєР°СЃС‚РѕРјРЅСѓСЋ Р»РѕРіРёРєСѓ.
 */

@Repository
public class OrderRepositoryImpl implements OrderRepository{


    @Autowired
    private OrderJpaRepository orderJpaRepository;

    /**
     * РЎРѕС…СЂР°РЅСЏРµС‚ РЅРѕРІС‹Р№ Р·Р°РєР°Р·
     * @param order Р—Р°РєР°Р· РґР»СЏ СЃРѕС…СЂР°РЅРµРЅРёСЏ
     * @return РЎРѕС…СЂР°РЅРµРЅРЅС‹Р№ Р·Р°РєР°Р·
     */
    @Override
    public Order save(Order order) {
        return orderJpaRepository.save(order);
    }

    /**
     * РС‰РµС‚ Р·Р°РєР°Р· РїРѕ ID
     * @param id РРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ Р·Р°РєР°Р·Р°
     * @return Optional СЃ Р·Р°РєР°Р·РѕРј РёР»Рё РѕС€РёР±РєРѕР№, РµСЃР»Рё РЅРµ РЅР°Р№РґРµРЅ
     * @throws RuntimeException РїСЂРё РѕС‚СЃСѓС‚СЃС‚РІРёРё Р·Р°РєР°Р·Р°
     */

    @Override
    public Optional<Order> findById(Long id) {
        return Optional.ofNullable(orderJpaRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Р—Р°РєР°Р· РЅРµ РЅР°Р№РґРµРЅ")));
    }



    @Override
    public void deleteById(Long id) {
        orderJpaRepository.deleteById(id);
    }

    @Override
    public Order update(Order order) {
        return orderJpaRepository.save(order); // save() РѕР±РЅРѕРІР»СЏРµС‚, РµСЃР»Рё РѕР±СЉРµРєС‚ СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚
    }

    @Override
    public List<Order> findAll() {
        return orderJpaRepository.findAll();
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\repositories\ProductJpaRepository.java
================================================================================

package com.example.diplom.repositories;

import com.example.diplom.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface ProductJpaRepository extends JpaRepository<Product, Long> {
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\repositories\ProductRepository.java
================================================================================

package com.example.diplom.repositories;

import com.example.diplom.model.Product;

import java.util.List;
import java.util.Optional;

public interface ProductRepository {

    Product save(Product product);

    Optional<Product> findById(Long id);

    List<Product> findAll();

    void deleteById(Long id);

    Product update(Product product);

    boolean existsById(Long id);
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\repositories\ProductRepositoryImpl.java
================================================================================

package com.example.diplom.repositories;

import com.example.diplom.model.Product;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;


@Repository
public class ProductRepositoryImpl implements ProductRepository {


    @Autowired
    private ProductJpaRepository productJpaRepository;


    @Override
    public Product save(Product product) {
        return productJpaRepository.save(product);
    }

    @Override
    public Optional<Product> findById(Long id) {
        Optional<Product>  product= Optional.ofNullable(productJpaRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("РџСЂРѕРґСѓРєС‚ РЅРµ РЅР°Р№РґРµРЅ")));
        return product;
    }

    @Override
    public List<Product> findAll() {
        return productJpaRepository.findAll();
    }

    @Override
    public void deleteById(Long id) {
        productJpaRepository.deleteById(id);
    }

    @Override
    public Product update(Product product) {
        return productJpaRepository.save(product); // save() РѕР±РЅРѕРІР»СЏРµС‚, РµСЃР»Рё РѕР±СЉРµРєС‚ СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚
    }

    @Override
    public boolean existsById(Long id) {
        return productJpaRepository.existsById(id);
    }
}





================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\service\MenuService.java
================================================================================

package com.example.diplom.service;

import com.example.diplom.model.Menu;
import com.example.diplom.model.MenuItem;
import com.example.diplom.repositories.MenuItemRepository;
import com.example.diplom.repositories.MenuRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * РЎРµСЂРІРёСЃ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РјРµРЅСЋ Рё РµРіРѕ РїСѓРЅРєС‚Р°РјРё.
 */
@Service
@RequiredArgsConstructor
public class MenuService {
    private final MenuRepository menuRepository;
    private final MenuItemRepository menuItemRepository;

    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІРѕРµ РјРµРЅСЋ.
     *
     * @param menu РѕР±СЉРµРєС‚ РјРµРЅСЋ РґР»СЏ СЃРѕС…СЂР°РЅРµРЅРёСЏ
     * @return СЃРѕС…СЂР°РЅРµРЅРЅРѕРµ РјРµРЅСЋ
     */
    public Menu createMenu(Menu menu) {
        return menuRepository.save(menu);
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ РїСѓРЅРєС‚ РјРµРЅСЋ РІ СѓРєР°Р·Р°РЅРЅРѕРµ РјРµРЅСЋ.
     *
     * @param menuId ID РјРµРЅСЋ
     * @param item   РїСѓРЅРєС‚ РјРµРЅСЋ РґР»СЏ РґРѕР±Р°РІР»РµРЅРёСЏ
     * @return СЃРѕС…СЂР°РЅРµРЅРЅС‹Р№ РїСѓРЅРєС‚ РјРµРЅСЋ
     * @throws RuntimeException РµСЃР»Рё РјРµРЅСЋ РЅРµ РЅР°Р№РґРµРЅРѕ
     */
    public MenuItem addItemToMenu(Long menuId, MenuItem item) {
        Menu menu = menuRepository.findById(menuId)
                .orElseThrow(() -> new RuntimeException("РњРµРЅСЋ РЅРµ РЅР°Р№РґРµРЅРѕ"));
        item.setMenu(menu);
        return menuItemRepository.save(item);
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РІСЃРµ РїСѓРЅРєС‚С‹ РјРµРЅСЋ РїРѕ ID РјРµРЅСЋ.
     *
     * @param menuId ID РјРµРЅСЋ
     * @return СЃРїРёСЃРѕРє РїСѓРЅРєС‚РѕРІ РјРµРЅСЋ
     */
    public List<MenuItem> getMenuItems(Long menuId) {
        return menuItemRepository.findByMenuId(menuId);
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РІСЃРµ РјРµРЅСЋ.
     *
     * @return СЃРїРёСЃРѕРє РІСЃРµС… РјРµРЅСЋ
     */
    public List<Menu> getAllMenus() {
        return menuRepository.findAll();
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјРµРЅСЋ РїРѕ РµРіРѕ ID.
     *
     * @param menuId ID РјРµРЅСЋ
     * @return РјРµРЅСЋ
     * @throws RuntimeException РµСЃР»Рё РјРµРЅСЋ РЅРµ РЅР°Р№РґРµРЅРѕ
     */
    public Menu getMenuById(Long menuId) {
        return menuRepository.findById(menuId)
                .orElseThrow(() -> new RuntimeException("РњРµРЅСЋ РЅРµ РЅР°Р№РґРµРЅРѕ"));
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РїСѓРЅРєС‚ РјРµРЅСЋ РїРѕ РµРіРѕ ID.
     *
     * @param menuItemId ID РїСѓРЅРєС‚Р° РјРµРЅСЋ
     * @return Optional СЃ РїСѓРЅРєС‚РѕРј РјРµРЅСЋ РёР»Рё РїСѓСЃС‚РѕР№
     */
    public Optional<MenuItem> getMenuItemById(Long menuItemId) {
        return menuItemRepository.findById(menuItemId);
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\service\OrderService.java
================================================================================

package com.example.diplom.service;

import com.example.diplom.dto.OrderResponse;
import com.example.diplom.model.*;
import com.example.diplom.repositories.MenuItemRepository;
import com.example.diplom.repositories.OrderRepository;
import com.example.diplom.repositories.ProductRepository;
import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;



/**
 * РЎРµСЂРІРёСЃ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ Р·Р°РєР°Р·Р°РјРё Рё РёС… РїСЂРѕРґСѓРєС‚Р°РјРё.
 */
@Slf4j
@AllArgsConstructor
@Service
public class OrderService {
    private final OrderRepository orderRepository;

    private final ProductRepository productRepository;

    private final MenuItemRepository menuItemRepository;
    private final MenuService menuService;


    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІС‹Р№ Р·Р°РєР°Р·.
     *
     * @param order Р·Р°РєР°Р· РґР»СЏ СЃРѕС…СЂР°РЅРµРЅРёСЏ
     * @return СЃРѕР·РґР°РЅРЅС‹Р№ Р·Р°РєР°Р·
     */
    public Order createOrder(Order order) {
        return orderRepository.save(order);
    }


    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ Р·Р°РєР°Р· РїРѕ РµРіРѕ ID.
     *
     * @param id ID Р·Р°РєР°Р·Р°
     * @return Р·Р°РєР°Р·
     * @throws RuntimeException РµСЃР»Рё Р·Р°РєР°Р· РЅРµ РЅР°Р№РґРµРЅ
     */
    public Order getOrderById(Long id) {
        return orderRepository.findById(id)
                .orElseThrow(() -> {
                log.warn("Р—Р°РєР°Р· СЃ ID {} РЅРµ РЅР°Р№РґРµРЅ", id);
                return new RuntimeException("Р—Р°РєР°Р· РЅРµ РЅР°Р№РґРµРЅ");
                });
    }


    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РІСЃРµ Р·Р°РєР°Р·С‹.
     *
     * @return СЃРїРёСЃРѕРє РІСЃРµС… Р·Р°РєР°Р·РѕРІ
     */
    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }


    /**
     * РЈРґР°Р»СЏРµС‚ Р·Р°РєР°Р· РїРѕ РµРіРѕ ID.
     *
     * @param id ID Р·Р°РєР°Р·Р°
     */
    public void deleteOrder(Long id) {
        orderRepository.deleteById(id);
    }


    /**
     * РћР±РЅРѕРІР»СЏРµС‚ СЃСѓС‰РµСЃС‚РІСѓСЋС‰РёР№ Р·Р°РєР°Р·.
     *
     * @param order Р·Р°РєР°Р· РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ
     * @return РѕР±РЅРѕРІР»РµРЅРЅС‹Р№ Р·Р°РєР°Р·
     */
    public Order updateOrder(Order order) {
        return orderRepository.update(order);
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ РїСЂРѕРґСѓРєС‚ РёР· РјРµРЅСЋ РІ Р·Р°РєР°Р·.
     *
     * @param orderId      ID Р·Р°РєР°Р·Р°
     * @param menuItemId   ID РїСѓРЅРєС‚Р° РјРµРЅСЋ
     * @return РѕР±РЅРѕРІР»РµРЅРЅС‹Р№ Р·Р°РєР°Р·
     * @throws RuntimeException РµСЃР»Рё Р·Р°РєР°Р· РёР»Рё РїСѓРЅРєС‚ РјРµРЅСЋ РЅРµ РЅР°Р№РґРµРЅС‹
     */

    @Transactional
    public Order addProductFromMenu(Long orderId, Long menuItemId) {

        MenuItem menuItem = menuItemRepository.findById(menuItemId)
                .orElseThrow(() -> new RuntimeException("РџСЂРѕРґСѓРєС‚ РІ РјРµРЅСЋ РЅРµ РЅР°Р№РґРµРЅ"));


        Product product = createProductFromMenuItem(menuItem);
        product.setMenuId(menuItem.getMenu().getId());


        Product savedProduct = productRepository.save(product);


        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Р—Р°РєР°Р· РЅРµ РЅР°Р№РґРµРЅ"));
        order.addProduct(savedProduct);

        return orderRepository.save(order);
    }


    /**
     * РЎРѕР·РґР°РµС‚ РїСЂРѕРґСѓРєС‚ РЅР° РѕСЃРЅРѕРІРµ СЌР»РµРјРµРЅС‚Р° РјРµРЅСЋ, РєРѕРїРёСЂСѓСЏ РµРіРѕ СЃРІРѕР№СЃС‚РІР°.
     * РџРѕРґРґРµСЂР¶РёРІР°РµС‚ СЂР°Р·Р»РёС‡РЅС‹Рµ С‚РёРїС‹ РјРµРЅСЋ (PizzaMenuItem, RollMenuItem Рё РґСЂ.).
     * Р”Р»СЏ РєР°Р¶РґРѕРіРѕ С‚РёРїР° СЃРѕР·РґР°РµС‚СЃСЏ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РёР№ РїСЂРѕРґСѓРєС‚ СЃ СЃРѕС…СЂР°РЅРµРЅРёРµРј СЃРїРµС†РёС„РёС‡РЅС‹С… С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёРє.
     *
     * @param item СЌР»РµРјРµРЅС‚ РјРµРЅСЋ, РЅР° РѕСЃРЅРѕРІРµ РєРѕС‚РѕСЂРѕРіРѕ СЃРѕР·РґР°РµС‚СЃСЏ РїСЂРѕРґСѓРєС‚
     * @return РЅРѕРІС‹Р№ РїСЂРѕРґСѓРєС‚ СЃ РґР°РЅРЅС‹РјРё РёР· СЌР»РµРјРµРЅС‚Р° РјРµРЅСЋ
     * @throws IllegalArgumentException РµСЃР»Рё С‚РёРї СЌР»РµРјРµРЅС‚Р° РјРµРЅСЋ РЅРµ РїРѕРґРґРµСЂР¶РёРІР°РµС‚СЃСЏ
     */
    private Product createProductFromMenuItem(MenuItem item) {

        if (item instanceof PizzaMenuItem) {
            PizzaMenuItem pizzaItem = (PizzaMenuItem) item;
            Pizza pizza = new Pizza();
            pizza.setName(pizzaItem.getName());
            pizza.setDescription(pizzaItem.getDescription());
            pizza.setPrice(pizzaItem.getPrice());
            pizza.setDiameter(pizzaItem.getDiameter());
            pizza.setMenuId(item.getMenu().getId());
            return pizza;
        }else if (item instanceof RollMenuItem) {
            RollMenuItem rollItem = (RollMenuItem) item;
            RollDish roll = new RollDish();
            roll.setName(rollItem.getName());
            roll.setDescription(rollItem.getDescription());
            roll.setPrice(rollItem.getPrice());
            roll.setPieceCount(rollItem.getPieceCount()); // РўРѕР»СЊРєРѕ pieceCount
            roll.setMenuId(item.getMenu().getId());
            return roll;
        }

        // РђРЅР°Р»РѕРіРёС‡РЅРѕ РґР»СЏ РґСЂСѓРіРёС… С‚РёРїРѕРІ
        throw new IllegalArgumentException("РўРёРї РїСЂРѕРґСѓРєС‚Р° РЅРµ РїРѕРґРґРµСЂР¶РёРІР°РµС‚СЃСЏ");
    }



    /**
     * РџРѕРґСЃС‡РёС‚С‹РІР°РµС‚ СЃСѓРјРјСѓ Р·Р°РєР°Р·Р°.
     *
     * @param orderId ID Р·Р°РєР°Р·Р°.
     * @return РЎСѓРјРјР° Р·Р°РєР°Р·Р°.
     */
    public double calculateOrderTotal(Long orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Р—Р°РєР°Р· РЅРµ РЅР°Р№РґРµРЅ"));

        return order.getProducts().stream()
                .mapToDouble(Product::getPrice)
                .sum();
    }


    /**
     * РџСЂРµРѕР±СЂР°Р·СѓРµС‚ Р·Р°РєР°Р· РІ DTO РѕС‚РІРµС‚Р°.
     *
     * @param orderById Р·Р°РєР°Р·
     * @param total     СЃСѓРјРјР° Р·Р°РєР°Р·Р°
     * @return DTO РѕС‚РІРµС‚Р°
     */
    public OrderResponse orderToOrderResponse(Order orderById, double total) {

        OrderResponse response = new OrderResponse();
        response.setId(orderById.getId());
        response.setStatus(orderById.getStatus());
        response.setProducts(orderById.getProducts());
        response.setTotal(total);
        return response;
    }


    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РІСЃРµ Р·Р°РєР°Р·С‹ СЃ СЃСѓРјРјР°РјРё Рё РёРЅС„РѕСЂРјР°С†РёРµР№ Рѕ СЂРµСЃС‚РѕСЂР°РЅРµ.
     *
     * @return СЃРїРёСЃРѕРє DTO Р·Р°РєР°Р·РѕРІ
     */
    public List<OrderResponse> getAllOrdersWithTotals() {
        List<Order> orders=orderRepository.findAll();
        return orders.stream()
                .map(order -> {
                    double total = calculateOrderTotal(order.getId());
                    OrderResponse response = orderToOrderResponse(order, total);


                    // РџСЂРѕРІРµСЂСЏРµРј, РµСЃС‚СЊ Р»Рё РїСЂРѕРґСѓРєС‚С‹ РІ Р·Р°РєР°Р·Рµ
                    if (!order.getProducts().isEmpty()) {
                        Product firstProduct = order.getProducts().get(0);
                        // РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ menuId РЅРµ null
                        if (firstProduct.getMenuId() != null) {
                            try {
                                Menu menu = menuService.getMenuById(firstProduct.getMenuId());
                                response.setRestaurantName(menu.getName());
                                response.setRestaurantAddress(menu.getAddress());
                            } catch (RuntimeException e) {
                                // Р›РѕРіРёСЂСѓРµРј РѕС€РёР±РєСѓ, РµСЃР»Рё РјРµРЅСЋ РЅРµ РЅР°Р№РґРµРЅРѕ
                                log.error("РњРµРЅСЋ СЃ ID {} РЅРµ РЅР°Р№РґРµРЅРѕ", firstProduct.getMenuId());
                                response.setRestaurantName("РќРµРёР·РІРµСЃС‚РЅС‹Р№ СЂРµСЃС‚РѕСЂР°РЅ");
                                response.setRestaurantAddress("РђРґСЂРµСЃ РЅРµ СѓРєР°Р·Р°РЅ");
                            }
                        } else {
                            log.warn("РџСЂРѕРґСѓРєС‚ {} РЅРµ РёРјРµРµС‚ menuId", firstProduct.getId());
                            response.setRestaurantName("РќРµРёР·РІРµСЃС‚РЅС‹Р№ СЂРµСЃС‚РѕСЂР°РЅ");
                            response.setRestaurantAddress("РђРґСЂРµСЃ РЅРµ СѓРєР°Р·Р°РЅ");
                        }
                    }
                    return response;
                })
                .collect(Collectors.toList());
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\service\ProductService.java
================================================================================



package com.example.diplom.service;

import com.example.diplom.model.Product;
import com.example.diplom.repositories.ProductRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;


/**
 * РЎРµСЂРІРёСЃ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РїСЂРѕРґСѓРєС‚Р°РјРё.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ProductService {

    private final ProductRepository productRepository;

    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІС‹Р№ РїСЂРѕРґСѓРєС‚, РµСЃР»Рё РїСЂРѕРґСѓРєС‚ СЃ С‚Р°РєРёРј ID РЅРµ СЃСѓС‰РµСЃС‚РІСѓРµС‚.
     *
     * @param product РџСЂРѕРґСѓРєС‚ РґР»СЏ СЃРѕР·РґР°РЅРёСЏ.
     * @return РЎРѕР·РґР°РЅРЅС‹Р№ РїСЂРѕРґСѓРєС‚.
     * @throws IllegalArgumentException Р•СЃР»Рё РїСЂРѕРґСѓРєС‚ СЃ С‚Р°РєРёРј ID СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚.
     */
    @Transactional
    public Product createProduct(Product product) {
        if (product.getId() != null && productRepository.existsById(product.getId())) {
            log.warn("РџСЂРѕРґСѓРєС‚ СЃ ID {} СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚", product.getId());
            throw new IllegalArgumentException("РџСЂРѕРґСѓРєС‚ СЃ С‚Р°РєРёРј ID СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚");
        }
        return productRepository.save(product);
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РїСЂРѕРґСѓРєС‚ РїРѕ РµРіРѕ ID.
     *
     * @param id ID РїСЂРѕРґСѓРєС‚Р°.
     * @return РќР°Р№РґРµРЅРЅС‹Р№ РїСЂРѕРґСѓРєС‚.
     * @throws RuntimeException Р•СЃР»Рё РїСЂРѕРґСѓРєС‚ РЅРµ РЅР°Р№РґРµРЅ.
     */
    public Product getProductById(Long id) {
        return productRepository.findById(id)
                .orElseThrow(() -> {
                    log.warn("РџСЂРѕРґСѓРєС‚ СЃ ID {} РЅРµ РЅР°Р№РґРµРЅ", id);
                    return new RuntimeException("РџСЂРѕРґСѓРєС‚ РЅРµ РЅР°Р№РґРµРЅ");
                });
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ СЃРїРёСЃРѕРє РІСЃРµС… РїСЂРѕРґСѓРєС‚РѕРІ.
     *
     * @return РЎРїРёСЃРѕРє РїСЂРѕРґСѓРєС‚РѕРІ.
     */
    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    /**
     * РЈРґР°Р»СЏРµС‚ РїСЂРѕРґСѓРєС‚ РїРѕ РµРіРѕ ID.
     *
     * @param id ID РїСЂРѕРґСѓРєС‚Р°.
     * @throws RuntimeException Р•СЃР»Рё РїСЂРѕРґСѓРєС‚ РЅРµ РЅР°Р№РґРµРЅ.
     */
    @Transactional
    public void deleteProduct(Long id) {
        if (!productRepository.existsById(id)) {
            log.warn("РџСЂРѕРґСѓРєС‚ СЃ ID {} РЅРµ РЅР°Р№РґРµРЅ", id);
            throw new RuntimeException("РџСЂРѕРґСѓРєС‚ РЅРµ РЅР°Р№РґРµРЅ");
        }
        productRepository.deleteById(id);
    }

    /**
     * РћР±РЅРѕРІР»СЏРµС‚ СЃСѓС‰РµСЃС‚РІСѓСЋС‰РёР№ РїСЂРѕРґСѓРєС‚.
     *
     * @param product РџСЂРѕРґСѓРєС‚ РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ.
     * @return РћР±РЅРѕРІР»РµРЅРЅС‹Р№ РїСЂРѕРґСѓРєС‚.
     * @throws RuntimeException Р•СЃР»Рё РїСЂРѕРґСѓРєС‚ РЅРµ РЅР°Р№РґРµРЅ.
     */
    @Transactional
    public Product updateProduct(Product product) {
        if (product.getId() == null || !productRepository.existsById(product.getId())) {
            log.warn("РџСЂРѕРґСѓРєС‚ СЃ ID {} РЅРµ РЅР°Р№РґРµРЅ", product.getId());
            throw new RuntimeException("РџСЂРѕРґСѓРєС‚ РЅРµ РЅР°Р№РґРµРЅ");
        }
        return productRepository.save(product);
    }



    public boolean existsById(Long id) {
        return productRepository.existsById(id);
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\DiplomApplication.java
================================================================================

package com.example.diplom;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DiplomApplication {

	public static void main(String[] args) {



		SpringApplication.run(DiplomApplication.class, args);
	}

}









================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\resources\templates\orders.html
================================================================================

<!DOCTYPE html>
        <html xmlns:th="http://www.thymeleaf.org">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <!-- РџРѕРґРєР»СЋС‡РµРЅРёРµ Bootstrap CSS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">

        <!-- РџРѕРґРєР»СЋС‡РµРЅРёРµ СЃРѕР±СЃС‚РІРµРЅРЅС‹С… СЃС‚РёР»РµР№ -->
        <link rel="stylesheet" th:href="@{/css/styles.css}">

        <title>РњРѕРё Р·Р°РєР°Р·С‹</title>
</head>
<body class="bg-light">
<!-- Р‘Р»РѕРє Р°РІС‚РѕСЂРёР·Р°С†РёРё -->
<div class="auth-section" style="position: absolute; top: 20px; left: 20px;">
    <div th:if="${#authorization.expression('isAuthenticated()')}">
        <form th:action="@{/logout}" method="post">
            <button type="submit" class="btn btn-outline-danger btn-sm">
                Р’С‹Р№С‚Рё ([[${#authentication.principal.username}]])
            </button>
        </form>
    </div>
    <div th:unless="${#authorization.expression('isAuthenticated()')}">
        <form th:action="@{/login}" method="post" class="d-flex gap-2">
            <input type="text" name="username" placeholder="Р›РѕРіРёРЅ" class="form-control form-control-sm">
            <input type="password" name="password" placeholder="РџР°СЂРѕР»СЊ" class="form-control form-control-sm">
            <button type="submit" class="btn btn-primary btn-sm">Р’РѕР№С‚Рё</button>
        </form>
        <div th:if="${param.error}" class="text-danger mt-1">РћС€РёР±РєР° Р°РІС‚РѕСЂРёР·Р°С†РёРё!</div>
    </div>
</div>
<!-- РћСЃРЅРѕРІРЅРѕР№ РєРѕРЅС‚РµР№РЅРµСЂ -->
<div class="container mt-5 " style="padding-top: 120px;">
    <div class="card shadow">
        <div class="card-body">
            <h1 class="text-center mb-4 text-primary">РњРѕРё Р·Р°РєР°Р·С‹</h1>

            <!-- РЎРїРёСЃРѕРє Р·Р°РєР°Р·РѕРІ -->
            <div th:each="order : ${orders}">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            Р—Р°РєР°Р· #<span th:text="${order.id}"></span>
                            <span class="badge bg-secondary" th:text="${order.status}"></span>
                        </h5>
                        <p class="card-text">
                            <strong>Р РµСЃС‚РѕСЂР°РЅ:</strong>
                            <span th:text="${order.restaurantName}"></span>
                            (<span th:text="${order.restaurantAddress}"></span>)
                        </p>
                        <p class="card-text">
                            <strong>РЎСѓРјРјР°:</strong>
                            <span th:text="${order.total}"></span> в‚Ѕ
                        </p>
                        <ul class="list-group">
                            <li class="list-group-item" th:each="product : ${order.products}">
                                <span th:text="${product.name}"></span> -
                                <span th:text="${product.description}"></span> -
<!--                                <span th:text="${product.price}"></span> в‚Ѕ-->
                                <span th:text="${#numbers.formatDecimal(product.price, 1, 2)}"></span> в‚Ѕ
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <a href="/menu" class="btn btn-outline-primary">
                    в†ђ Р’РµСЂРЅСѓС‚СЊСЃСЏ РІ РјРµРЅСЋ
                </a>
            </div>
        </div>
    </div>
</div>

<!-- РџРѕРґРєР»СЋС‡РµРЅРёРµ Bootstrap JS Рё Popper.js -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>



================================================================================
Файл: D:\обучение\Diplom\diplom\pom.xml
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>diplom</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>diplom</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- Spring Security OAuth2 -->

		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity6</artifactId>
		</dependency>
		<dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<version>4.4.0</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-test -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<version>6.3.3</version>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
