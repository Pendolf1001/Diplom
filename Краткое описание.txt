Описание приложения

Данный проект представляет собой веб-приложение для управления заказами в ресторане, включая функционал для клиентов, сотрудников и администраторов. Основные компоненты:
Технологический стек

    Backend: Java, Spring Boot (Security, MVC, Data JPA).

    База данных: Реляционная СУБД (настройки ORM через JPA).

    Безопасность: Аутентификация и авторизация с использованием ролей (ADMIN, STAFF, USER), хеширование паролей (BCrypt).

    Сборка: Maven (версия 3.9.9).

Основные сущности

    Пользователи (User):

        Роли (Role): ADMIN, STAFF.

        Аутентификация через логин/пароль, управление сессиями.

    Меню (Menu):

        Содержит пункты меню (MenuItem), которые делятся на пиццы (PizzaMenuItem) и роллы (RollMenuItem).

    Продукты (Product):

        Наследуются от Dish, включают пиццы (Pizza) и роллы (RollDish).

    Заказы (Order):

        Статусы: NEW, IN_PROGRESS, COMPLETED.

        Связь ManyToMany с продуктами.

Функционал

    Клиентская часть:

        Просмотр меню.

        Добавление/удаление товаров в корзину (сессия HttpSession).

        Оформление заказа с подсчетом суммы (CartController).

        Авторизация через /login (LoginController).

    Административная часть:

        Управление меню: добавление/удаление пицц и роллов (MenuController).

        Просмотр всех заказов (/cart/all, доступно для STAFF и ADMIN).

        Управление продуктами (ProductsController).

    Сотрудники:

        Обновление статусов заказов.

        Просмотр активных заказов.

Архитектура

    Контроллеры: Обрабатывают HTTP-запросы, возвращают HTML-шаблоны (Thymeleaf) или JSON (REST).

    Сервисы:

        MenuService: Работа с меню и пунктами.

        OrderService: Логика заказов, конвертация MenuItem в Product.

        ProductService: Управление продуктами.

    Репозитории: Spring Data JPA (MenuRepository, OrderRepository, ProductRepository).

    DTO:

        OrderResponse: Передача данных о заказе (ID, статус, продукты, сумма).

        ProductDTO: Создание продуктов через API.

Безопасность

    Настройки в SecurityConfig:

        Доступ к /cart/all только для STAFF и ADMIN.

        Доступ к остальным путям (кроме публичных) только для ADMIN.

        Форма входа: /login, успешная аутентификация перенаправляет на сохраненный URL.

        Выход: /logout с очисткой сессии и куки.

Особенности реализации

    Корзина:

        Хранится в сессии (HttpSession).

        При оформлении заказа пункты меню конвертируются в продукты (convertMenuItemsToProducts).

    Работа с заказами:

        Статус заказа автоматически обновляется на основе статусов продуктов (updateOrderStatus).

    Обработка ошибок:

        Использование RedirectAttributes для передачи сообщений об ошибках/успехе.

        Кастомные исключения (например, при отсутствии меню).

Потенциальные улучшения

    Валидация:

        Проверка входных данных в DTO.

        Обработка исключений через @ControllerAdvice.

    Тестирование:

        Написание unit- и integration-тестов для сервисов и контроллеров.

    Расширение функционала:

        Добавление оплаты.

        История заказов для пользователей.

        Категории меню.

    Оптимизация:

        Кэширование часто запрашиваемых данных (например, меню).

        Пагинация для списка заказов.

Запуск и использование

    Требования:

        Java 17+, Maven 3.9.9, СУБД (настройки в application.properties).

    Сборка:

        mvn clean install.

    Доступ:

        Клиент: /menu, корзина: /cart.

        Админ: управление через REST API (/menus, /products, /orders).

Проект демонстрирует классическое Spring-приложение с разделением ролей, ORM и REST API. 