
================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\CartController.java
================================================================================

package com.example.diplom.controllers;

import com.example.diplom.model.*;
import com.example.diplom.service.MenuService;
import com.example.diplom.service.OrderService;
import jakarta.servlet.http.HttpSession;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * РљРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РєРѕСЂР·РёРЅРѕР№ Рё Р·Р°РєР°Р·Р°РјРё.
 * РћР±СЂР°Р±Р°С‚С‹РІР°РµС‚ РѕРїРµСЂР°С†РёРё РґРѕР±Р°РІР»РµРЅРёСЏ/СѓРґР°Р»РµРЅРёСЏ С‚РѕРІР°СЂРѕРІ, РѕС„РѕСЂРјР»РµРЅРёСЏ Р·Р°РєР°Р·РѕРІ
 * Рё РїСЂРѕСЃРјРѕС‚СЂР° СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ (РґР»СЏ СЃРѕС‚СЂСѓРґРЅРёРєРѕРІ).
 */
@Slf4j
@AllArgsConstructor
@Controller
@RequestMapping("/cart")
public class CartController {

    private final OrderService orderService;
    private final MenuService menuService;

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃС‚СЂР°РЅРёС†Сѓ РєРѕСЂР·РёРЅС‹.
     * Р’С‹С‡РёСЃР»СЏРµС‚ РѕР±С‰СѓСЋ СЃС‚РѕРёРјРѕСЃС‚СЊ С‚РѕРІР°СЂРѕРІ Рё РїРµСЂРµРґР°РµС‚ РґР°РЅРЅС‹Рµ РІ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ.
     *
     * @param session РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ РїРѕР»СѓС‡РµРЅРёСЏ РєРѕСЂР·РёРЅС‹
     * @param model   РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё РґР°РЅРЅС‹С… РІ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ
     * @return РЁР°Р±Р»РѕРЅ СЃС‚СЂР°РЅРёС†С‹ РєРѕСЂР·РёРЅС‹ (cart.html)
     */
    @GetMapping
    public String viewCart(HttpSession session, Model model) {
        List<MenuItem> cart = getCart(session);
        double total = calculateTotal(cart);

        model.addAttribute("cart", cart);
        model.addAttribute("total", total);
        return "cart";
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ С‚РѕРІР°СЂ РІ РєРѕСЂР·РёРЅСѓ.
     * РЎРѕС…СЂР°РЅСЏРµС‚ РІС‹Р±СЂР°РЅРЅС‹Р№ С‚РѕРІР°СЂ РІ СЃРµСЃСЃРёРё Рё РїРµСЂРµРЅР°РїСЂР°РІР»СЏРµС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РјРµРЅСЋ.
     *
     * @param menuItemId ID РґРѕР±Р°РІР»СЏРµРјРѕРіРѕ С‚РѕРІР°СЂР°
     * @param session    РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ С…СЂР°РЅРµРЅРёСЏ РєРѕСЂР·РёРЅС‹
     * @return Р РµРґРёСЂРµРєС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РјРµРЅСЋ СЃ С‚РµРєСѓС‰РёРј menuId
     */
    @PostMapping("/add")
    public String addToCart(@RequestParam Long menuItemId, HttpSession session) {
        Long menuId = (Long) session.getAttribute("currentMenuId");
        List<MenuItem> cart = Optional.ofNullable((List<MenuItem>) session.getAttribute("cart"))
                .orElse(new ArrayList<>());

        MenuItem menuItem = menuService.getMenuItemById(menuItemId)
                .orElseThrow(() -> new RuntimeException("Р‘Р»СЋРґРѕ РЅРµ РЅР°Р№РґРµРЅРѕ"));

        cart.add(menuItem);
        session.setAttribute("cart", cart);
        return "redirect:/menu?mid=" + menuId;
    }

    /**
     * РЈРґР°Р»СЏРµС‚ С‚РѕРІР°СЂ РёР· РєРѕСЂР·РёРЅС‹.
     *
     * @param menuItemId ID СѓРґР°Р»СЏРµРјРѕРіРѕ С‚РѕРІР°СЂР°
     * @param session    РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ РєРѕСЂР·РёРЅС‹
     * @return Р РµРґРёСЂРµРєС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РјРµРЅСЋ СЃ С‚РµРєСѓС‰РёРј menuId
     */
    @PostMapping("/remove")
    public String removeFromCart(@RequestParam Long menuItemId, HttpSession session) {
        Long menuId = (Long) session.getAttribute("currentMenuId");
        List<MenuItem> cart = getCart(session);

        cart.removeIf(item -> item.getId().equals(menuItemId));
        session.setAttribute("cart", cart);

        return "redirect:/menu?mid=" + menuId;
    }

    /**
     * РћС„РѕСЂРјР»СЏРµС‚ Р·Р°РєР°Р· Рё РѕС‡РёС‰Р°РµС‚ РєРѕСЂР·РёРЅСѓ.
     * РљРѕРЅРІРµСЂС‚РёСЂСѓРµС‚ СЌР»РµРјРµРЅС‚С‹ РјРµРЅСЋ РІ РїСЂРѕРґСѓРєС‚С‹ Рё СЃРѕС…СЂР°РЅСЏРµС‚ Р·Р°РєР°Р·.
     *
     * @param session           РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ РїРѕР»СѓС‡РµРЅРёСЏ РєРѕСЂР·РёРЅС‹
     * @param redirectAttributes РђС‚СЂРёР±СѓС‚С‹ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРѕРѕР±С‰РµРЅРёР№ РѕР± РѕС€РёР±РєР°С…/СѓСЃРїРµС…Рµ
     * @return Р РµРґРёСЂРµРєС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РјРµРЅСЋ СЃ СЃРѕРѕР±С‰РµРЅРёРµРј СЂРµР·СѓР»СЊС‚Р°С‚Р°
     */
    @PostMapping("/checkout")
    public String checkout(HttpSession session, RedirectAttributes redirectAttributes) {
        List<MenuItem> cart = getCart(session);

        if (cart.isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "РљРѕСЂР·РёРЅР° РїСѓСЃС‚Р°!");
            return "redirect:/menu";
        }

        Order order = new Order();
        order.setStatus(OrderStatus.NEW);
        order.setProducts(convertMenuItemsToProducts(cart));
        orderService.createOrder(order);

        session.removeAttribute("cart");
        redirectAttributes.addFlashAttribute("success", "Р—Р°РєР°Р· СѓСЃРїРµС€РЅРѕ РѕС„РѕСЂРјР»РµРЅ!");
        return "redirect:/menu";
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃРїРёСЃРѕРє РІСЃРµС… Р·Р°РєР°Р·РѕРІ (РґР»СЏ СЃРѕС‚СЂСѓРґРЅРёРєРѕРІ Рё Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂРѕРІ).
     *
     * @param model РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ
     * @return РЁР°Р±Р»РѕРЅ СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ (orders.html)
     */
    @GetMapping("/all")
    @PreAuthorize("hasRole('STAFF') or hasRole('ADMIN')")
    public String viewAllOrders(Model model) {
        model.addAttribute("orders", orderService.getAllOrdersWithTotals());
        return "orders";
    }

    // ==== Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Рµ РјРµС‚РѕРґС‹ ====

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РєРѕСЂР·РёРЅСѓ РёР· СЃРµСЃСЃРёРё РёР»Рё СЃРѕР·РґР°РµС‚ РЅРѕРІСѓСЋ.
     *
     * @param session РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё
     * @return РЎРїРёСЃРѕРє С‚РѕРІР°СЂРѕРІ РІ РєРѕСЂР·РёРЅРµ
     */
    private List<MenuItem> getCart(HttpSession session) {
        List<MenuItem> cart = (List<MenuItem>) session.getAttribute("cart");
        if (cart == null) {
            cart = new ArrayList<>();
            session.setAttribute("cart", cart);
        }
        return cart;
    }

    /**
     * Р’С‹С‡РёСЃР»СЏРµС‚ РѕР±С‰СѓСЋ СЃС‚РѕРёРјРѕСЃС‚СЊ С‚РѕРІР°СЂРѕРІ РІ РєРѕСЂР·РёРЅРµ.
     *
     * @param cart РЎРїРёСЃРѕРє С‚РѕРІР°СЂРѕРІ
     * @return РћР±С‰Р°СЏ СЃСѓРјРјР° Р·Р°РєР°Р·Р°
     */
    private double calculateTotal(List<MenuItem> cart) {
        return cart.stream().mapToDouble(MenuItem::getPrice).sum();
    }

    /**
     * РљРѕРЅРІРµСЂС‚РёСЂСѓРµС‚ СЌР»РµРјРµРЅС‚С‹ РјРµРЅСЋ РІ РїСЂРѕРґСѓРєС‚С‹ СЃ РїСЂРёРІСЏР·РєРѕР№ Рє РјРµРЅСЋ.
     *
     * @param menuItems РЎРїРёСЃРѕРє СЌР»РµРјРµРЅС‚РѕРІ РјРµРЅСЋ
     * @return РЎРїРёСЃРѕРє РїСЂРѕРґСѓРєС‚РѕРІ РґР»СЏ СЃРѕС…СЂР°РЅРµРЅРёСЏ РІ Р·Р°РєР°Р·Рµ
     * @throws IllegalArgumentException Р•СЃР»Рё С‚РёРї Р±Р»СЋРґР° РЅРµ РїРѕРґРґРµСЂР¶РёРІР°РµС‚СЃСЏ
     * @throws IllegalStateException    Р•СЃР»Рё СЌР»РµРјРµРЅС‚ РјРµРЅСЋ РЅРµ РїСЂРёРІСЏР·Р°РЅ Рє РјРµРЅСЋ
     */
    private List<Product> convertMenuItemsToProducts(List<MenuItem> menuItems) {
        return menuItems.stream()
                .map(item -> {
                    Product product;
                    if (item instanceof PizzaMenuItem) {
                        PizzaMenuItem pizzaItem = (PizzaMenuItem) item;
                        product = new Pizza(
                                pizzaItem.getName(),
                                pizzaItem.getDescription(),
                                pizzaItem.getPrice(),
                                pizzaItem.getDiameter()
                        );
                    } else if (item instanceof RollMenuItem) {
                        RollMenuItem rollItem = (RollMenuItem) item;
                        product = new RollDish(
                                rollItem.getName(),
                                rollItem.getDescription(),
                                rollItem.getPrice(),
                                rollItem.getPieceCount()
                        );
                    } else {
                        throw new IllegalArgumentException("РќРµРїРѕРґРґРµСЂР¶РёРІР°РµРјС‹Р№ С‚РёРї Р±Р»СЋРґР°");
                    }

                    if (item.getMenu() == null) {
                        throw new IllegalStateException("MenuItem РЅРµ РёРјРµРµС‚ СЃРІСЏР·Р°РЅРЅРѕРіРѕ РјРµРЅСЋ");
                    }
                    product.setMenuId(item.getMenu().getId());
                    return product;
                })
                .collect(Collectors.toList());
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\LoginController.java
================================================================================

package com.example.diplom.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class LoginController {
    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃС‚СЂР°РЅРёС†Сѓ РІС…РѕРґР°.
     *
     * @return РЁР°Р±Р»РѕРЅ СЃС‚СЂР°РЅРёС†С‹ РІС…РѕРґР° (login.html)
     */
    @GetMapping("/login")
    public String login() {
        return "login";
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃС‚СЂР°РЅРёС†Сѓ РІС‹С…РѕРґР°.
     *
     * @return РЁР°Р±Р»РѕРЅ СЃС‚СЂР°РЅРёС†С‹ РІС‹С…РѕРґР° (logout.html)
     */
    @GetMapping("/logout")
    public String logout() {
        return "logout";
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\MainController.java
================================================================================

package com.example.diplom.controllers;


import com.example.diplom.model.Menu;
import com.example.diplom.model.MenuItem;
import com.example.diplom.service.MenuService;
import com.example.diplom.service.OrderService;
import com.example.diplom.service.ProductService;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.List;

// MainController.java
/**
 * РћСЃРЅРѕРІРЅРѕР№ РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ РіР»Р°РІРЅРѕР№ СЃС‚СЂР°РЅРёС†С‹ Рё РјРµРЅСЋ.
 */
@RequiredArgsConstructor
@Controller
public class MainController {
    private final ProductService productService;
    private final MenuService menuService;
    private final OrderService orderService;

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ РґРѕРјР°С€РЅСЋСЋ СЃС‚СЂР°РЅРёС†Сѓ СЃРѕ СЃРїРёСЃРєРѕРј РјРµРЅСЋ.
     *
     * @param model РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРїРёСЃРєР° РјРµРЅСЋ
     * @return РЁР°Р±Р»РѕРЅ РіР»Р°РІРЅРѕР№ СЃС‚СЂР°РЅРёС†С‹ (index.html)
     */
    @GetMapping("/")
    public String home(Model model) {
        List<Menu> menus = menuService.getAllMenus();
        model.addAttribute("menus", menus);
        model.addAttribute("message", "Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ РІ РЅР°С€ СЂРµСЃС‚РѕСЂР°РЅ!");
        return "index";
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ РјРµРЅСЋ РїРѕ СѓРєР°Р·Р°РЅРЅРѕРјСѓ ID РёР»Рё РёР· СЃРµСЃСЃРёРё.
     *
     * @param mid      ID РјРµРЅСЋ (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ)
     * @param session  РћР±СЉРµРєС‚ СЃРµСЃСЃРёРё РґР»СЏ С…СЂР°РЅРµРЅРёСЏ С‚РµРєСѓС‰РµРіРѕ menuId
     * @param model    РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЌР»РµРјРµРЅС‚РѕРІ РјРµРЅСЋ Рё РѕР±С‰РµР№ СЃСѓРјРјС‹
     * @return РЁР°Р±Р»РѕРЅ РјРµРЅСЋ (menu.html)
     */
    @GetMapping("/menu")
    public String menu(@RequestParam(required = false) Long mid, HttpSession session, Model model) {
        Long menuId = (mid != null) ? mid : (Long) session.getAttribute("currentMenuId");
        if (menuId == null) {
            menuId = 1L;
        }
        session.setAttribute("currentMenuId", menuId);
        List<MenuItem> menuItems = menuService.getMenuItems(menuId);
        List<MenuItem> cart = (List<MenuItem>) session.getAttribute("cart");
        if (cart == null) {
            cart = new ArrayList<>();
            session.setAttribute("cart", cart);
        }
        double total = cart != null ? calculateTotal(cart) : 0.0;
        model.addAttribute("menuItems", menuItems);
        model.addAttribute("total", total);
        return "menu";
    }

    private double calculateTotal(List<MenuItem> cart) {
        return cart.stream().mapToDouble(MenuItem::getPrice).sum();
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃРїРёСЃРѕРє Р·Р°РєР°Р·РѕРІ.
     *
     * @param model РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ
     * @return РЁР°Р±Р»РѕРЅ СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ (orders.html)
     */
    @GetMapping("/view")
    public String viewOrders(Model model) {
        model.addAttribute("orders", orderService.getAllOrdersWithTotals());
        return "orders";
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\MenuController.java
================================================================================

package com.example.diplom.controllers;

import com.example.diplom.model.*;
import com.example.diplom.service.MenuService;
import com.example.diplom.service.OrderService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;


/**
 * REST-РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РјРµРЅСЋ.
 */
@RestController
@RequestMapping("/menus")
@RequiredArgsConstructor
public class MenuController {
    private final MenuService menuService;

    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІРѕРµ РјРµРЅСЋ.
     *
     * @param menu РћР±СЉРµРєС‚ РјРµРЅСЋ РґР»СЏ СЃРѕР·РґР°РЅРёСЏ
     * @return РЎРѕР·РґР°РЅРЅРѕРµ РјРµРЅСЋ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping
    public ResponseEntity<Menu> createMenu(@RequestBody Menu menu) {
        return ResponseEntity.ok(menuService.createMenu(menu));
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ РїРёС†С†Сѓ РІ РјРµРЅСЋ.
     *
     * @param menuId ID РјРµРЅСЋ
     * @param pizza  Р”Р°РЅРЅС‹Рµ РїРёС†С†С‹
     * @return РЎРѕС…СЂР°РЅРµРЅРЅР°СЏ РїРёС†С†Р° РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping("/{menuId}/pizzas")
    public ResponseEntity<PizzaMenuItem> addPizzaToMenu(
            @PathVariable Long menuId,
            @RequestBody PizzaMenuItem pizza) {
        PizzaMenuItem savedPizza;
        try {
            savedPizza = (PizzaMenuItem) menuService.addItemToMenu(menuId, pizza);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new PizzaMenuItem());
        }
        return new ResponseEntity<>(savedPizza, HttpStatus.CREATED);
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ СЂРѕР»Р»С‹ РІ РјРµРЅСЋ.
     *
     * @param menuId ID РјРµРЅСЋ
     * @param roll   Р”Р°РЅРЅС‹Рµ СЂРѕР»Р»Р°
     * @return РЎРѕС…СЂР°РЅРµРЅРЅС‹Р№ СЂРѕР»Р» РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping("/{menuId}/rolls")
    public ResponseEntity<RollMenuItem> addRollsToMenu(
            @PathVariable Long menuId,
            @RequestBody RollMenuItem roll) {
        RollMenuItem savedRoll;
        try {
            savedRoll = (RollMenuItem) menuService.addItemToMenu(menuId, roll);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new RollMenuItem());
        }
        return new ResponseEntity<>(savedRoll, HttpStatus.CREATED);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ СЌР»РµРјРµРЅС‚С‹ РјРµРЅСЋ РїРѕ ID.
     *
     * @param menuId ID РјРµРЅСЋ
     * @return РЎРїРёСЃРѕРє СЌР»РµРјРµРЅС‚РѕРІ РјРµРЅСЋ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @GetMapping("/{menuId}/items")
    public ResponseEntity<List<MenuItem>> getMenuItems(@PathVariable Long menuId) {
        try {
            Menu menuById = menuService.getMenuById(menuId);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ArrayList<>());
        }
        return ResponseEntity.ok(menuService.getMenuItems(menuId));
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РІСЃРµ РјРµРЅСЋ.
     *
     * @return РЎРїРёСЃРѕРє РІСЃРµС… РјРµРЅСЋ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @GetMapping
    public ResponseEntity<List<Menu>> getAllMenus() {
        return new ResponseEntity<>(menuService.getAllMenus(), HttpStatus.OK);
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\OrderController.java
================================================================================

package com.example.diplom.controllers;


//import com.example.diplom.cases.AddProductToOrderUseCase;
import com.example.diplom.dto.OrderResponse;
import com.example.diplom.model.Order;

import com.example.diplom.service.OrderService;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

/**
 * REST-РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ Р·Р°РєР°Р·Р°РјРё.
 */
@Slf4j
@AllArgsConstructor
@RestController
@RequestMapping("/orders")
class OrderController {
    private final OrderService orderService;

    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІС‹Р№ Р·Р°РєР°Р·.
     *
     * @param order РћР±СЉРµРєС‚ Р·Р°РєР°Р·Р° РґР»СЏ СЃРѕР·РґР°РЅРёСЏ
     * @return РЎРѕР·РґР°РЅРЅС‹Р№ Р·Р°РєР°Р· РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping
    public ResponseEntity<Order> createOrder(@RequestBody Order order) {
        return new ResponseEntity<>(orderService.createOrder(order), HttpStatus.CREATED);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ Р·Р°РєР°Р· РїРѕ ID СЃ РѕР±С‰РµР№ СЃСѓРјРјРѕР№.
     *
     * @param id ID Р·Р°РєР°Р·Р°
     * @return Р—Р°РєР°Р· СЃ РѕР±С‰РµР№ СЃСѓРјРјРѕР№ РІ DTO
     */
    @GetMapping("/{id}")
    public ResponseEntity<OrderResponse> getOrder(@PathVariable Long id) {
        Order orderById;
        try {
            orderById = orderService.getOrderById(id);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new OrderResponse());
        }
        double total = orderService.calculateOrderTotal(id);
        OrderResponse response = orderService.orderToOrderResponse(orderById, total);
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РІСЃРµ Р·Р°РєР°Р·С‹ СЃ СЃСѓРјРјР°РјРё.
     *
     * @return РЎРїРёСЃРѕРє Р·Р°РєР°Р·РѕРІ СЃ СЃСѓРјРјР°РјРё РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @GetMapping
    public ResponseEntity<List<OrderResponse>> getAllOrders() {
        return new ResponseEntity<>(orderService.getAllOrdersWithTotals(), HttpStatus.OK);
    }

    /**
     * РЈРґР°Р»СЏРµС‚ Р·Р°РєР°Р· РїРѕ ID.
     *
     * @param id ID Р·Р°РєР°Р·Р°
     * @return РџСѓСЃС‚РѕР№ РѕС‚РІРµС‚ РїСЂРё СѓСЃРїРµС…Рµ
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteOrder(@PathVariable Long id) {
        orderService.deleteOrder(id);
        return ResponseEntity.ok().build();
    }

    /**
     * РћР±РЅРѕРІР»СЏРµС‚ СЃСѓС‰РµСЃС‚РІСѓСЋС‰РёР№ Р·Р°РєР°Р·.
     *
     * @param id    ID Р·Р°РєР°Р·Р°
     * @param order РћР±РЅРѕРІР»РµРЅРЅС‹Рµ РґР°РЅРЅС‹Рµ Р·Р°РєР°Р·Р°
     * @return РћР±РЅРѕРІР»РµРЅРЅС‹Р№ Р·Р°РєР°Р· РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PutMapping("/{id}")
    public ResponseEntity<Order> updateOrder(@PathVariable Long id, @RequestBody Order order) {
        try {
            return new ResponseEntity<>(orderService.updateOrder(order), HttpStatus.OK);
        } catch (RuntimeException e) {
            log.warn("Р—Р°РєР°Р· СЃ С‚Р°РєРёРј Id РЅРµ РЅР°Р№РґРµРЅ");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new Order());
        }
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ РїСЂРѕРґСѓРєС‚ РёР· РјРµРЅСЋ РІ Р·Р°РєР°Р·.
     *
     * @param orderId      ID Р·Р°РєР°Р·Р°
     * @param menuItemId ID СЌР»РµРјРµРЅС‚Р° РјРµРЅСЋ
     * @return РћР±РЅРѕРІР»РµРЅРЅС‹Р№ Р·Р°РєР°Р· РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping("/{orderId}/menu-items/{menuItemId}")
    public ResponseEntity<Order> addProductFromMenu(
            @PathVariable Long orderId,
            @PathVariable Long menuItemId) {
        try {
            Order updatedOrder = orderService.addProductFromMenu(orderId, menuItemId);
            return new ResponseEntity<>(updatedOrder, HttpStatus.OK);
        } catch (RuntimeException e) {
            log.warn("РћС€РёР±РєР° РїСЂРё РґРѕР±Р°РІР»РµРЅРёРё РїСЂРѕРґСѓРєС‚Р° РІ Р·Р°РєР°Р·: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new Order());
        }
    }

    /**
     * РћС‚РѕР±СЂР°Р¶Р°РµС‚ СЃРїРёСЃРѕРє Р·Р°РєР°Р·РѕРІ.
     *
     * @param model РњРѕРґРµР»СЊ РґР»СЏ РїРµСЂРµРґР°С‡Рё СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ
     * @return РЁР°Р±Р»РѕРЅ СЃРїРёСЃРєР° Р·Р°РєР°Р·РѕРІ (orders.html)
     */
    @GetMapping("/view")
    public String viewOrders(Model model) {
        model.addAttribute("orders", orderService.getAllOrdersWithTotals());
        return "orders";
    }

    /**
     * Р”РѕР±Р°РІР»СЏРµС‚ С‚РѕРІР°СЂ РІ С‚РµРєСѓС‰РёР№ Р·Р°РєР°Р· (СѓРїСЂРѕС‰РµРЅРЅР°СЏ РІРµСЂСЃРёСЏ).
     *
     * @param menuItemId ID СЌР»РµРјРµРЅС‚Р° РјРµРЅСЋ
     * @param attributes РђС‚СЂРёР±СѓС‚С‹ РґР»СЏ СЃРѕРѕР±С‰РµРЅРёР№
     * @return Р РµРґРёСЂРµРєС‚ РЅР° РјРµРЅСЋ СЃ СѓРІРµРґРѕРјР»РµРЅРёРµРј
     */
    @PostMapping("/add")
    public String addToOrder(
            @RequestParam Long menuItemId,
            RedirectAttributes attributes) {
        try {
            Order order = orderService.createOrder(new Order());
            orderService.addProductFromMenu(order.getId(), menuItemId);
            attributes.addFlashAttribute("success", "Р‘Р»СЋРґРѕ РґРѕР±Р°РІР»РµРЅРѕ РІ Р·Р°РєР°Р·!");
        } catch (Exception e) {
            attributes.addFlashAttribute("error", "РћС€РёР±РєР°: " + e.getMessage());
        }
        return "redirect:/menu";
    }
}

================================================================================
Файл: D:\обучение\Diplom\diplom\src\main\java\com\example\diplom\controllers\ProductsController.java
================================================================================

package com.example.diplom.controllers;

import com.example.diplom.dto.ProductDTO;
import com.example.diplom.model.*;
import com.example.diplom.service.ProductService;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

// ProductsController.java
/**
 * REST-РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РїСЂРѕРґСѓРєС‚Р°РјРё.
 */
@RestController
@AllArgsConstructor
@RequestMapping("/products")
public class ProductsController {
    private final ProductService productService;

    /**
     * РЎРѕР·РґР°РµС‚ РЅРѕРІС‹Р№ РїСЂРѕРґСѓРєС‚ РЅР° РѕСЃРЅРѕРІРµ DTO.
     *
     * @param productDTO DTO СЃ РґР°РЅРЅС‹РјРё РїСЂРѕРґСѓРєС‚Р°
     * @return РЎРѕР·РґР°РЅРЅС‹Р№ РїСЂРѕРґСѓРєС‚ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody ProductDTO productDTO) {
        Product product;
        if ("PIZZA".equals(productDTO.getDtype())) {
            product = new Pizza(productDTO.getName(), productDTO.getDescription(), productDTO.getPrice(), productDTO.getDiameter());
        } else if ("ROLL".equals(productDTO.getDtype())) {
            product = new RollDish(productDTO.getName(), productDTO.getDescription(), productDTO.getPrice(), productDTO.getPieceCount());
        } else {
            throw new IllegalArgumentException("РќРµРёР·РІРµСЃС‚РЅС‹Р№ С‚РёРї РїСЂРѕРґСѓРєС‚Р°");
        }
        Product createdProduct = productService.createProduct(product);
        return new ResponseEntity<>(createdProduct, HttpStatus.CREATED);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РїСЂРѕРґСѓРєС‚ РїРѕ ID.
     *
     * @param id ID РїСЂРѕРґСѓРєС‚Р°
     * @return РџСЂРѕРґСѓРєС‚ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @GetMapping("/{id}")
    public ResponseEntity<Product> getProduct(@PathVariable Long id) {
        Product productById;
        try {
            productById = (Product) productService.getProductById(id);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new Pizza());
        }
        return new ResponseEntity<>(productById, HttpStatus.OK);
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ РІСЃРµ РїСЂРѕРґСѓРєС‚С‹.
     *
     * @return РЎРїРёСЃРѕРє РІСЃРµС… РїСЂРѕРґСѓРєС‚РѕРІ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        return new ResponseEntity<>(productService.getAllProducts(), HttpStatus.OK);
    }

    /**
     * РЈРґР°Р»СЏРµС‚ РїСЂРѕРґСѓРєС‚ РїРѕ ID.
     *
     * @param id ID РїСЂРѕРґСѓРєС‚Р°
     * @return РџСѓСЃС‚РѕР№ РѕС‚РІРµС‚ РїСЂРё СѓСЃРїРµС…Рµ
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
        Product productById;
        try {
            productById = productService.getProductById(id);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
        productService.deleteProduct(productById.getId());
        return ResponseEntity.ok().build();
    }

    /**
     * РћР±РЅРѕРІР»СЏРµС‚ СЃСѓС‰РµСЃС‚РІСѓСЋС‰РёР№ РїСЂРѕРґСѓРєС‚.
     *
     * @param id          ID РїСЂРѕРґСѓРєС‚Р°
     * @param productDTO DTO СЃ РѕР±РЅРѕРІР»РµРЅРЅС‹РјРё РґР°РЅРЅС‹РјРё
     * @return РћР±РЅРѕРІР»РµРЅРЅС‹Р№ РїСЂРѕРґСѓРєС‚ РІ С‚РµР»Рµ РѕС‚РІРµС‚Р°
     */
    @PutMapping("/{id}")
    public ResponseEntity<Product> updateProduct(@PathVariable Long id, @RequestBody ProductDTO productDTO) {
        Product productById;
        try {
            productById = productService.getProductById(id);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new Pizza());
        }
        if (productDTO.getName() != null) {
            productById.setName(productDTO.getName());
        }
        if (productDTO.getDescription() != null) {
            productById.setDescription(productDTO.getDescription());
        }
        if (productDTO.getPrice() != 0) {
            productById.setPrice(productDTO.getPrice());
        }
        if (productDTO.getProductStatus() != null) {
            productById.setProductStatus(productDTO.getProductStatus());
        }
        if (productById instanceof Pizza && productDTO.getDiameter() != 0) {
            ((Pizza) productById).setDiameter(productDTO.getDiameter());
        }
        Product updatedProduct = productService.updateProduct(productById);
        return new ResponseEntity<>(updatedProduct, HttpStatus.OK);
    }
}
